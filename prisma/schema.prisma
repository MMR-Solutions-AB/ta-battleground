// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  image         String
  score         Int          @default(0)
  accounts      Account[]
  sessions      Session[]
  submission    Submission[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Real Schema

enum ProblemDifficulty {
  easy
  medium
  hard
}

model Problem {
  id          String            @id @default(cuid())
  name        String            @unique
  difficulty  ProblemDifficulty @default(easy)
  description String            @db.LongText
  testCases   Json
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  submissions Submission[]

  @@index([name, difficulty])
}

enum SubmissionStatus {
  completed
  failed
}

model Submission {
  id        String           @id @default(cuid())
  code      String           @db.MediumText
  status    SubmissionStatus @default(failed)
  testCases Json
  problemId String
  problem   Problem          @relation(fields: [problemId], references: [id])
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([problemId])
  @@index([userId])
}
