// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Real Schema

model User {
  id                String         @id @default(cuid())
  name              String
  email             String         @unique
  bio               String?
  blog              String?
  company           String?
  location          String?
  twitter_username  String?
  emailVerified     DateTime?
  github_login      String
  image             String
  isTechoverStaff   Boolean        @default(false)
  batch             Int?           @db.SmallInt
  score             Float          @default(0)
  completedProblems Int            @default(0)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @default(now()) @updatedAt
  accounts          Account[]
  sessions          Session[]
  submissions       Submission[]
  faction           FactionMember?

  @@index([name])
  @@index([email])
  @@index([completedProblems])
  @@index([score])
}

model Faction {
  id           String                @id @default(cuid())
  name         String                @unique
  allTimeScore Float                 @default(0)
  image        String                @default("")
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  members      FactionMember[]
  wars         FactionWarContender[]
}

model FactionMember {
  id        String   @id @default(cuid())
  factionId String
  faction   Faction  @relation(fields: [factionId], references: [id], onDelete: Cascade)
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([factionId, userId])
  @@index([factionId])
  @@index([userId])
}

model War {
  id         String                @id @default(cuid())
  name       String                @unique
  number     Int                   @unique
  startTime  DateTime
  endTime    DateTime
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
  problems   Problem[]
  contenders FactionWarContender[]
}

model FactionWarContender {
  id        String   @id @default(cuid())
  score     Float    @default(0)
  factionId String
  faction   Faction  @relation(fields: [factionId], references: [id], onDelete: Cascade)
  warId     String
  war       War      @relation(fields: [warId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([factionId, warId])
  @@index([score])
  @@index([factionId])
  @@index([warId])
}

enum ProblemDifficulty {
  easy
  medium
  hard
}

model Problem {
  id          String            @id @default(cuid())
  name        String            @unique
  difficulty  ProblemDifficulty
  description String            @db.LongText
  number      Int               @unique
  testCases   Json
  arguments   Json
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  submissions Submission[]      @relation("submsissions")
  tags        Tag[]
  topSolution Submission?       @relation("topSolution")
  warId       String?
  war         War?              @relation(fields: [warId], references: [id], onDelete: SetNull)

  @@index([name, difficulty, number])
  @@index([name])
  @@index([difficulty])
  @@index([createdAt])
  @@index([number])
  @@index([warId])
}

enum TagNames {
  basics
  strings
  numbers
  arrays
  objects
  functions
}

model Tag {
  id        String    @id @default(cuid())
  name      TagNames
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  problems  Problem[]

  @@unique([name])
  @@index([name])
}

enum SubmissionStatus {
  completed
  failed
}

model Submission {
  id                   String           @id @default(cuid())
  code                 String           @db.MediumText
  status               SubmissionStatus
  score                Float
  testCases            Json
  problemId            String
  problem              Problem          @relation("submsissions", fields: [problemId], references: [id], onDelete: Cascade)
  topSolutionProblemId String?          @unique
  topSolutionProblem   Problem?         @relation("topSolution", fields: [topSolutionProblemId], references: [id])
  userId               String
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  @@index([problemId])
  @@index([topSolutionProblemId])
  @@index([userId])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([score])
  @@index([status])
}
